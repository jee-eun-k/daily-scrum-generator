// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Existing tables (from db pull)
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model daily_scrum {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model lunch {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String?
  theme      String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model restaurants {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  theme_id   String?  @db.Uuid
  created_at DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  themes     themes?  @relation(fields: [theme_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([theme_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model themes {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String        @unique
  created_at  DateTime      @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  restaurants restaurants[]
}

// New Daily Scrum Generator tables
model User {
  id        String   @id // User-defined identifier (can be any string)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  dailyLogs    DailyLog[]
  userSettings UserSettings?
  
  @@map("users")
}

model DailyLog {
  id     String   @id @default(uuid()) @db.Uuid
  userId String   @map("user_id") // References User.id (string)
  date   DateTime @db.Date
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  user    User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries LogEntry[]
  
  @@unique([userId, date])
  @@map("daily_logs")
}

enum LogCategory {
  DONE
  TODO
  BLOCKER
  UPCOMING
}

model LogEntry {
  id          String      @id @default(uuid()) @db.Uuid
  dailyLogId  String      @map("daily_log_id") @db.Uuid
  workItemId  String?     @map("work_item_id") // Optional work item ID
  description String
  category    LogCategory
  order       Int         @default(0) // For ordering within a category
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  dailyLog DailyLog @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)
  
  @@map("log_entries")
}

model UserSettings {
  id               String  @id @default(uuid()) @db.Uuid
  userId           String  @unique @map("user_id") // References User.id (string)
  azureDevOpsUrl   String? @map("azure_devops_url")
  azureDevOpsToken String? @map("azure_devops_token")
  defaultProject   String? @map("default_project")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_settings")
}