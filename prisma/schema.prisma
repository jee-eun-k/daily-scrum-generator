// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  dailyLogs DailyLog[]
  
  @@map("users")
}

model DailyLog {
  id     String   @id @default(uuid()) @db.Uuid
  userId String   @map("user_id") @db.Uuid
  date   DateTime @db.Date
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  user    User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries LogEntry[]
  
  @@unique([userId, date])
  @@map("daily_logs")
}

enum LogCategory {
  DONE
  TODO
  BLOCKER
  UPCOMING
}

model LogEntry {
  id          String      @id @default(uuid()) @db.Uuid
  dailyLogId  String      @map("daily_log_id") @db.Uuid
  workItemId  String?     @map("work_item_id") // Optional work item ID
  description String
  category    LogCategory
  order       Int         @default(0) // For ordering within a category
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  dailyLog DailyLog @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)
  
  @@map("log_entries")
}
